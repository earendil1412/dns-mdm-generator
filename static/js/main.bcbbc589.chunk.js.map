{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Option","App","props","state","ips","name","option","TLS","Input","type","value","this","onChange","event","setState","target","map","index","length","key","temp","Button","onClick","splice","push","RadioGroup","row","_","FormControlLabel","control","Radio","label","HTTPS","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","download","renderXML","Component","x","join","uuid","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bcbbc589.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as uuid from 'uuid'\nimport {Button, FormControlLabel, Input, Radio, RadioGroup} from \"@material-ui/core\";\n\nenum Option {\n    TLS,\n    HTTPS\n}\n\ntype DNS = {\n    option: Option,\n    ips: string[],\n    name: string\n}\n\nclass App extends Component<{}, DNS> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {ips: [\"\"], name: \"\", option: Option.TLS}\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Encrypt DNS MDM Generator\n                </h1>\n                name:\n                <Input type=\"text\" value={this.state.name} onChange={(event) => {\n                    this.setState({name: event.target.value})\n                }}/>\n                server:\n                {\n                    this.state.ips.map((value: string, index: number) => {\n                        if (index !== this.state.ips.length - 1) {\n                            return (\n                                <Input type=\"text\" key={index} value={this.state.ips[index]} onChange={(event) => {\n                                    let temp = this.state.ips\n                                    temp[index] = event.target.value\n                                    this.setState({ips: temp})\n                                }}/>\n                            )\n                        } else {\n                            return ([\n                                    <Input type=\"text\" key={index} value={this.state.ips[index]} onChange={(event) => {\n                                        let temp = this.state.ips\n                                        temp[index] = event.target.value\n                                        this.setState({ips: temp})\n                                    }}/>,\n                                    <Button onClick={() => {\n                                        if (this.state.ips.length === 1) {\n                                            return\n                                        }\n                                        let temp = this.state.ips\n                                        temp.splice(temp.length - 1, 1)\n                                        this.setState({ips: temp})\n                                    }}>-</Button>,\n                                    <Button onClick={() => {\n                                        let temp = this.state.ips\n                                        temp.push(\"\")\n                                        this.setState({ips: temp})\n                                    }}>+</Button>\n                                ]\n                            )\n                        }\n                    })\n                }\n                <RadioGroup row onChange={(_, value: string) => {\n                    this.setState({option: Option[value as keyof typeof Option]})\n                }}>\n                    <FormControlLabel value={Option[Option.TLS]} control={<Radio/>} label={Option[Option.TLS]}/>\n                    <FormControlLabel value={Option[Option.HTTPS]} control={<Radio/>} label={Option[Option.HTTPS]}/>\n                </RadioGroup>\n                <Button\n                    onClick={() => download(\"test.xml\", renderXML(this.state.option, this.state.ips, this.state.name))}>Download\n                </Button>\n            </div>\n        );\n    }\n}\n\nfunction download(filename: string, text: string) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:xml/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n}\n\nconst renderXML = (option: Option, ips: string[], name: string) => {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>PayloadContent</key>\n        <array>\n            <dict>\n                <key>DNSSettings</key>\n                <dict>\n                    <key>DNSProtocol</key>\n                    <string>${option}</string>\n                    <key>ServerAddresses</key>\n                    <array>\n                        ${ips.map(x => `<string>${x}</string>`).join(\"\\n                        \")}\n                    </array>\n                    <key>${option === Option.TLS ? \"ServerName\" : \"ServerURL\"}</key>\n                    <string>dns.google</string>\n                </dict>\n                <key>PayloadDescription</key>\n                <string>Configures device to use encrypted DNS</string>\n                <key>PayloadDisplayName</key>\n                <string>${name}</string>\n                <key>PayloadIdentifier</key>\n                <string>com.apple.dnsSettings.managed.${uuid.v4()}</string>\n                <key>PayloadType</key>\n                <string>com.apple.dnsSettings.managed</string>\n                <key>PayloadUUID</key>\n                <string>${uuid.v4()}</string>\n                <key>PayloadVersion</key>\n                <integer>1</integer>\n                <key>ProhibitDisablement</key>\n                <false/>\n            </dict>\n        </array>\n        <key>PayloadDescription</key>\n        <string>Adds the encrypted DNS to Big Sur and iOS 14 based systems</string>\n        <key>PayloadDisplayName</key>\n        <string>${name}</string>\n        <key>PayloadIdentifier</key>\n        <string>com.github.earendil1412.dns-mdm-generator</string>\n        <key>PayloadRemovalDisallowed</key>\n        <false/>\n        <key>PayloadType</key>\n        <string>Configuration</string>\n        <key>PayloadUUID</key>\n        <string>${uuid.v4().toUpperCase()}</string>\n        <key>PayloadVersion</key>\n        <integer>1</integer>\n    </dict>\n</plist>\n`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}