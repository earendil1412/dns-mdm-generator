{"version":3,"sources":["ServerUrl.tsx","IpList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ServerUrl","props","state","url","TextField","multiline","size","value","this","InputProps","option","startAdornment","InputAdornment","position","endAdornment","onChange","event","setUrl","target","setState","Component","ipRegex","require","IpList","ipList","map","index","key","error","exact","test","setIp","Button","variant","style","display","length","onClick","removeIp","addIp","App","serverName","temp","ips","push","splice","ip","profileName","RadioGroup","row","_","FormControlLabel","control","Radio","label","disableElevation","disabled","filter","filename","text","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","renderXML","serverURL","join","uuid","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.761bcd8b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {InputAdornment, TextField} from \"@material-ui/core\";\n\ntype ServerUrlProps = {\n    option: \"TLS\" | \"HTTPS\",\n    setUrl: (value: string) => void\n}\ntype ServerUrlState = {\n    url: string\n}\n\nclass ServerUrl extends Component<ServerUrlProps, ServerUrlState> {\n    constructor(props: ServerUrlProps) {\n        super(props)\n        this.state = {url: \"\"}\n    }\n\n    render() {\n        return (\n            <TextField\n                multiline={true} size=\"small\" value={this.state.url}\n                InputProps={this.props.option === \"HTTPS\" ?\n                    {\n                        startAdornment: <InputAdornment position=\"start\">https://</InputAdornment>,\n                        endAdornment: <InputAdornment position=\"end\">/dns-query</InputAdornment>\n                    } : {}\n                }\n                onChange={(event) => {\n                    this.props.setUrl(event.target.value)\n                    this.setState({url: event.target.value})\n                }}/>\n        )\n    }\n}\n\nexport default ServerUrl","import React, {Component} from \"react\";\nimport {Button, TextField} from \"@material-ui/core\";\n\ntype IpListProps = {\n    ipList: string[],\n    removeIp: (index: number) => void,\n    addIp: () => void\n    setIp: (index: number, ip: string) => void\n}\nconst ipRegex = require('ip-regex');\n\nclass IpList extends Component<IpListProps, {}> {\n    render() {\n        return this.props.ipList.map((value: string, index: number) => {\n            return ([\n                    <TextField multiline={true} size=\"small\" key={index} value={this.props.ipList[index]}\n                               error={!ipRegex({exact: true}).test(this.props.ipList[index])}\n                               onChange={(event) => this.props.setIp(index, event.target.value)}/>,\n                    <Button size=\"small\" variant=\"outlined\" key={index + \"-\"}\n                            style={{display: this.props.ipList.length === 1 ? \"none\" : \"\"}}\n                            onClick={() => this.props.removeIp(index)}>-</Button>,\n                    <Button size=\"small\" variant=\"outlined\" key={index + \"+\"}\n                            style={{display: this.props.ipList.length === index + 1 ? \"\" : \"none\"}}\n                            onClick={this.props.addIp}>+</Button>,\n                    <br key={index + \"br\"}/>\n                ]\n            )\n        })\n    }\n}\n\nexport default IpList","import React, {Component} from 'react';\nimport './App.css';\nimport * as uuid from 'uuid'\nimport {Button, FormControlLabel, Radio, RadioGroup, TextField} from \"@material-ui/core\";\nimport ServerUrl from \"./ServerUrl\";\nimport IpList from \"./IpList\";\n\ntype DNS = {\n    option: \"TLS\" | \"HTTPS\",\n    ips: string[],\n    profileName: string,\n    serverName: string\n}\nconst ipRegex = require('ip-regex');\n\nclass App extends Component<{}, DNS> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {ips: [\"\"], profileName: \"\", option: \"TLS\", serverName: \"\"}\n    }\n\n    setUrl = (value: string) => this.setState({serverName: value})\n\n    addIp = () => {\n        let temp = this.state.ips\n        temp.push(\"\")\n        this.setState({ips: temp})\n    }\n\n    removeIp = (index: number) => {\n        if (this.state.ips.length === 1) {\n            return\n        }\n        let temp = this.state.ips\n        temp.splice(index, 1)\n        this.setState({ips: temp})\n    }\n\n    setIp = (index: number, ip: string) => {\n        let temp = this.state.ips\n        temp[index] = ip\n        this.setState({ips: temp})\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Encrypted DNS MDM Generator\n                </h1>\n                Profile Name:\n                <TextField multiline={true} size=\"small\" value={this.state.profileName}\n                           onChange={(event) => {\n                               this.setState({profileName: event.target.value})\n                           }}/>\n                <br/>\n                {this.state.option === \"TLS\" ? \"Server Name:\" : \"Server URL:\"}\n                <ServerUrl option={this.state.option} setUrl={this.setUrl}/>\n                <br/>\n                IP List:<br/>\n                <IpList addIp={this.addIp} removeIp={this.removeIp} setIp={this.setIp} ipList={this.state.ips}/>\n                <RadioGroup value={this.state.option} row onChange={(_, value: string) => {\n                    this.setState({option: value as \"TLS\" | \"HTTPS\"})\n                }}>\n                    <FormControlLabel value=\"TLS\" control={<Radio/>} label=\"TLS\"/>\n                    <FormControlLabel value=\"HTTPS\" control={<Radio/>} label=\"HTTPS\"/>\n                </RadioGroup>\n                <Button variant=\"contained\" disableElevation disabled={\n                    this.state.ips.filter(value => !ipRegex({exact: true}).test(value)).length !== 0\n                    || this.state.serverName === \"\" || this.state.profileName === \"\"\n                }\n                        onClick={\n                            () => download(\"encrypted-dns.mobileconfig\", renderXML(this.state.option, this.state.ips, this.state.profileName, this.state.serverName))\n                        }>Download\n                </Button>\n            </div>\n        );\n    }\n}\n\nfunction download(filename: string, text: string) {\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:xml/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n}\n\nconst renderXML = (option: \"TLS\" | \"HTTPS\", ips: string[], profileName: string, serverURL: string) => {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>PayloadContent</key>\n        <array>\n            <dict>\n                <key>DNSSettings</key>\n                <dict>\n                    <key>DNSProtocol</key>\n                    <string>${option}</string>\n                    <key>ServerAddresses</key>\n                    <array>\n                        ${ips.map(ip => `<string>${ip}</string>`).join(\"\\n                        \")}\n                    </array>\n                    <key>${option === \"TLS\" ? \"ServerName\" : \"ServerURL\"}</key>\n                    <string>${option === \"TLS\" ? serverURL : \"https://\" + serverURL + \"/dns-query\"}</string>\n                </dict>\n                <key>PayloadDescription</key>\n                <string>Configures device to use encrypted DNS</string>\n                <key>PayloadDisplayName</key>\n                <string>${profileName}</string>\n                <key>PayloadIdentifier</key>\n                <string>com.apple.dnsSettings.managed.${uuid.v4()}</string>\n                <key>PayloadType</key>\n                <string>com.apple.dnsSettings.managed</string>\n                <key>PayloadUUID</key>\n                <string>${uuid.v4()}</string>\n                <key>PayloadVersion</key>\n                <integer>1</integer>\n                <key>ProhibitDisablement</key>\n                <false/>\n            </dict>\n        </array>\n        <key>PayloadDescription</key>\n        <string>Adds the encrypted DNS to Big Sur and iOS 14 based systems</string>\n        <key>PayloadDisplayName</key>\n        <string>${profileName}</string>\n        <key>PayloadIdentifier</key>\n        <string>com.github.earendil1412.dns-mdm-generator</string>\n        <key>PayloadRemovalDisallowed</key>\n        <false/>\n        <key>PayloadType</key>\n        <string>Configuration</string>\n        <key>PayloadUUID</key>\n        <string>${uuid.v4().toUpperCase()}</string>\n        <key>PayloadVersion</key>\n        <integer>1</integer>\n    </dict>\n</plist>\n`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}