{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","state","ips","profileName","option","serverName","TextField","multiline","size","value","this","onChange","event","setState","target","map","index","key","temp","Button","style","display","length","onClick","splice","push","RadioGroup","row","_","FormControlLabel","control","Radio","label","filename","text","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","download","renderXML","Component","serverURL","x","join","uuid","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77b5b10d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport * as uuid from 'uuid'\nimport {Button, FormControlLabel, Radio, RadioGroup, TextField} from \"@material-ui/core\";\n\ntype DNS = {\n    option: string,\n    ips: string[],\n    profileName: string,\n    serverName: string\n}\n\nclass App extends Component<{}, DNS> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {ips: [\"\"], profileName: \"\", option: \"TLS\", serverName: \"\"}\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    Encrypt DNS MDM Generator\n                </h1>\n                Profile Name:\n                <TextField multiline={true} size=\"small\" value={this.state.profileName} onChange={(event) => {\n                    this.setState({profileName: event.target.value})\n                }}/>\n                <br/>\n                {this.state.option === \"TLS\" ? \"Server Name:\" : \"Server URL\"}\n                <TextField multiline={true} size=\"small\" value={this.state.serverName} onChange={(event) => {\n                    this.setState({serverName: event.target.value})\n                }}/>\n                <br/>\n                IP List:<br/>\n                {\n                    this.state.ips.map((value: string, index: number) => {\n                        return ([\n                                <TextField multiline={true} size=\"small\" key={index} value={this.state.ips[index]} onChange={(event) => {\n                                    let temp = this.state.ips\n                                    temp[index] = event.target.value\n                                    this.setState({ips: temp})\n                                }}/>,\n                                <Button style={{display: this.state.ips.length === 1 ? \"none\" : \"\"}} onClick={() => {\n                                    if (this.state.ips.length === 1) {\n                                        return\n                                    }\n                                    let temp = this.state.ips\n                                    temp.splice(index, 1)\n                                    this.setState({ips: temp})\n                                }}>-</Button>,\n                                <Button style={{display: this.state.ips.length === index + 1 ? \"\" : \"none\"}}\n                                        onClick={() => {\n                                            let temp = this.state.ips\n                                            temp.push(\"\")\n                                            this.setState({ips: temp})\n                                        }}>+</Button>,\n                                <br/>\n                            ]\n                        )\n                    })\n                }\n                <RadioGroup value={this.state.option} row onChange={(_, value: string) => {\n                    this.setState({option: value})\n                }}>\n                    <FormControlLabel value=\"TLS\" control={<Radio/>} label=\"TLS\"/>\n                    <FormControlLabel value=\"HTTPS\" control={<Radio/>} label=\"HTTPS\"/>\n                </RadioGroup>\n                <Button\n                    onClick={\n                        () => download(\"encrypted-dns.mobileconfig\", renderXML(this.state.option, this.state.ips, this.state.profileName, this.state.serverName))\n                    }>Download\n                </Button>\n            </div>\n        );\n    }\n}\n\nfunction download(filename: string, text: string) {\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:xml/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n}\n\nconst renderXML = (option: string, ips: string[], profileName: string, serverURL: string) => {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>PayloadContent</key>\n        <array>\n            <dict>\n                <key>DNSSettings</key>\n                <dict>\n                    <key>DNSProtocol</key>\n                    <string>${option}</string>\n                    <key>ServerAddresses</key>\n                    <array>\n                        ${ips.map(x => `<string>${x}</string>`).join(\"\\n                        \")}\n                    </array>\n                    <key>${option === \"TLS\" ? \"ServerName\" : \"ServerURL\"}</key>\n                    <string>${serverURL}</string>\n                </dict>\n                <key>PayloadDescription</key>\n                <string>Configures device to use encrypted DNS</string>\n                <key>PayloadDisplayName</key>\n                <string>${profileName}</string>\n                <key>PayloadIdentifier</key>\n                <string>com.apple.dnsSettings.managed.${uuid.v4()}</string>\n                <key>PayloadType</key>\n                <string>com.apple.dnsSettings.managed</string>\n                <key>PayloadUUID</key>\n                <string>${uuid.v4()}</string>\n                <key>PayloadVersion</key>\n                <integer>1</integer>\n                <key>ProhibitDisablement</key>\n                <false/>\n            </dict>\n        </array>\n        <key>PayloadDescription</key>\n        <string>Adds the encrypted DNS to Big Sur and iOS 14 based systems</string>\n        <key>PayloadDisplayName</key>\n        <string>${profileName}</string>\n        <key>PayloadIdentifier</key>\n        <string>com.github.earendil1412.dns-mdm-generator</string>\n        <key>PayloadRemovalDisallowed</key>\n        <false/>\n        <key>PayloadType</key>\n        <string>Configuration</string>\n        <key>PayloadUUID</key>\n        <string>${uuid.v4().toUpperCase()}</string>\n        <key>PayloadVersion</key>\n        <integer>1</integer>\n    </dict>\n</plist>\n`;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}